<?php
/**
 * @file
 * Code for the GSB Feature Base Fields feature.
 */

include_once 'gsb_feature_base_fields.features.inc';

/**
 * @file
 * Provides generic functions for all fields.
 */

/**
 * Implements hook_field_widget_form_alter().
 *   - Replace Remove button label for all Image and File fields with image_image and file_generic widget.
 */
function gsb_feature_base_fields_field_widget_form_alter(&$element, &$form_state, $context) {
  if (in_array($context['field']['type'], array('image', 'file')) &&
      in_array($context['instance']['widget']['type'], array('file_generic', 'image_image'))) {
    foreach($element as $key => $value) {
      if (is_numeric($key)) {
        $element[$key]['#process'][] = 'gsb_feature_base_fields_remove_button_label_process';
      }
    }
  }
}

/**
 * #process callback for changing the remove button text on file widgets.
 */
function gsb_feature_base_fields_remove_button_label_process($element, &$form_state) {
  $element['remove_button']['#value'] = t('Replace or remove');
  return $element;
}

/**
 * Implements hook_field_attach_form().
 */
function gsb_feature_base_fields_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  // If this is a field_book_url_pdf_unlimited field collection, then set the visibility to match 
  // the user's selected value of either 'Link' or 'PDF'
  if ($entity_type == 'field_collection_item' && $entity->field_name == 'field_book_url_pdf_unlimited') {
    $map = array(
      'Link' => array(
        'field_link_single',
      ),
      'PDF' => array(
        'field_file_single_public',
      ),
    );    
    // Loop through each possible value for the field_book_url_or_pdf field,
    // controlling the visibility of the dependent fields.    
    foreach ($map as $value => $fields) {
      foreach ($fields as $field) {
        $form[$field]['#states'] = array(
          'visible' => array(
            ':input[name="' . 'field_book_url_pdf_unlimited' . '[' . $langcode . '][' . $form['#delta'] . '][field_book_url_or_pdf][' . $langcode . ']"]' => array(
              array('value' => $value),
            ),
          ),
        );
      }
    }
    // remove "n/a" as an option for the field_book_url_or_pdf
    unset($form['field_book_url_or_pdf'][$langcode]['#options']['_none']);
  }

}

/**
 * Hides the specified groups and all of their nested fields and groups.
 *
 * @param array $form
 *   The form structure.
 * @param array $groups
 *   A list of group names to hide.
 * @param array $field_map
 *   (optional) A list of additional field names to hide.
 */
function gsb_feature_base_fields_hide_fieldgroups(&$form, $groups, $field_map = array()) {
  $nested_groups = array();
  foreach ($groups as $group) {
    // Hide this group.
    unset($form['#fieldgroups'][$group], $form['#groups'][$group]);
    if (isset($form['#group_children'])) {
      foreach ($form['#group_children'] as $field_name => $group_name) {
        if ($group_name == $group) {
          // If there are fields in this group, add them to the field map.
          if (isset($form[$field_name])) {
            $field_map[] = $field_name;
          }
          // If this is a group itself, add it to the list of nested groups.
          elseif (isset($form['#group_children'][$field_name])) {
            $nested_groups[] = $field_name;
          }
        }
      }
    }
  }
  // If there are any nested groups, recurse.
  if (!empty($nested_groups)) {
    gsb_feature_base_fields_hide_fieldgroups($form, $nested_groups);
  }
  foreach ($field_map as $field_name) {
    if (isset($form[$field_name])) {
      $form[$field_name]['#access'] = FALSE;
    }
  }
}
