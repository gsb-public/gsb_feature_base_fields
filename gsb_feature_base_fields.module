<?php

/**
 * @file
 * Provides generic functions for all fields.
 */

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter() for file_generic.
 */
function gsb_feature_base_fields_field_widget_file_generic_form_alter(&$element, &$form_state, $context) {
  // If the only allowed extension is PDF, set up a #process to change the
  // button text.
  if ($context['instance']['settings']['file_extensions'] === 'pdf') {
    $element[0]['#process'][] = 'gsb_feature_base_fields_pdf_file_process';
  }
}

/**
 * #process callback for changing the remove button text on file widgets.
 */
function gsb_feature_base_fields_pdf_file_process($element, &$form_state) {
  $element['remove_button']['#value'] = t('Remove PDF');
  return $element;
}

/**
 * Implements hook_field_extra_fields().
 */
function gsb_feature_base_fields_field_extra_fields() {
  $extra = array();
  foreach (module_invoke_all('gsb_feature_base_fields_faculty_author_types') as $node_type) {
    // Add an extra field for authors.
    $extra['node'][$node_type]['display']['gsb_feature_base_fields_faculty_authors'] = array(
      'label' => t('Faculty Authors'),
      'description' => t('The faculty authors'),
      'weight' => 0,
    );

  }
  return $extra;
}

/**
 * Implements hook_node_view().
 */
function gsb_feature_base_fields_node_view($node, $view_mode, $langcode) {
  $node_types = drupal_map_assoc(module_invoke_all('gsb_feature_base_fields_faculty_author_types'));
  if (!isset($node_types[$node->type]) || !field_info_instance('node', 'field_authors', $node->type)) {
    return;
  }

  // If this field is not configured for this view mode, skip it.
  $fields = field_extra_fields_get_display('node', $node->type, $view_mode);
  if (empty($fields['gsb_feature_base_fields_faculty_authors']['visible'])) {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  $faculty_authors = array();
  foreach ($wrapper->field_authors as $key => $author) {
    if (($faculty = $author->field_person_fac_single_ref) && $id = $faculty->getIdentifier()) {
      $view = $faculty->view('people_fpp');
      if (isset($view['node'][$id])) {
        $faculty_authors[$id] = $view['node'][$id];
        $faculty_authors[$id]['#weight'] = $key;
      }
    }
  }
  if (!empty($faculty_authors)) {
    $node->content['gsb_feature_base_fields_faculty_authors'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'faculty-author-wrapper',
        ),
      ),
      'label' => array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array(
            'label-above',
          ),
        ),
        '#children' => t('Faculty Authors'),
        '#weight' => -100,
      ),
    ) + $faculty_authors;
  }
}

/**
 * Implements hook_fields_field_attach_form().
 */
function gsb_feature_base_fields_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  // If this is a field_authors field collection, and the entity reference is set, 
  // setup the states for visibility
  if ($entity_type == 'field_collection_item' && $entity->field_name == 'field_authors') {
    $map = array(
      'UseEntityReference' => array(
        'field_person_fac_single_ref',
        'field_profile_visibility',
      ),
      'Other' => array(
        'field_first_name',
        'field_last_name',
      ),
    );
    // Loop through each possible value for the field_person_fac_or_other field,
    // controlling the visibility of the dependent fields.
    foreach ($map as $value => $fields) {
      foreach ($fields as $field) {
        $form[$field]['#states'] = array(
          'visible' => array(
            ':input[name="field_authors[' . $langcode . '][' . $form['#delta'] . '][field_person_fac_or_other][' . $langcode . ']"]' => array(
              array('value' => $value),
            ),
          ),
        );
      }
    }
    // remove "n/a" as an option for the fac_or_other
    unset($form['field_person_fac_or_other'][$langcode]['#options']['_none']);
  }

  // If this is a field_authors field collection, and the entity reference is set, 
  // setup the states for visibility
  if ($entity_type == 'field_collection_item' && $entity->field_name == 'field_book_url_pdf_unlimited') {
    $form['field_link_single']['#states'] = array(
      'visible' => array(
        ':input[name="' . 'field_book_url_pdf_unlimited' . '[' . $langcode . '][' . $form['#delta'] . '][field_book_url_or_pdf][' . $langcode . ']"]' => array(
          array('value' => 'Link'),
        ),
      ),
    );

    $form['field_file_single_public']['#states'] = array(
      'visible' => array(
        ':input[name="' . 'field_book_url_pdf_unlimited' . '[' . $langcode . '][' . $form['#delta'] . '][field_book_url_or_pdf][' . $langcode . ']"]' => array(
          array('value' => 'PDF'),
        ),
      ),
    );
    // remove "n/a" as an option for the field_book_url_or_pdf
    unset($form['field_book_url_or_pdf'][$langcode]['#options']['_none']);
  }
}
