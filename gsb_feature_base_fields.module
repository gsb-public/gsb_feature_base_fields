<?php

/**
 * @file
 * Provides generic functions for all fields.
 */

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter() for file_generic.
 */
function gsb_feature_base_fields_field_widget_file_generic_form_alter(&$element, &$form_state, $context) {
  // If the only allowed extension is PDF, set up a #process to change the
  // button text.
  if ($context['instance']['settings']['file_extensions'] === 'pdf') {
    $element[0]['#process'][] = 'gsb_feature_base_fields_pdf_file_process';
  }
}

/**
 * #process callback for changing the remove button text on file widgets.
 */
function gsb_feature_base_fields_pdf_file_process($element, &$form_state) {
  $element['remove_button']['#value'] = t('Remove PDF');
  return $element;
}

/**
 * Implements hook_field_attach_form().
 */
function gsb_feature_base_fields_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  // If this is a field_book_url_pdf_unlimited field collection, then set the visibility to match 
  // the user's selected value of either 'Link' or 'PDF'
  if ($entity_type == 'field_collection_item' && $entity->field_name == 'field_book_url_pdf_unlimited') {
    $map = array(
      'Link' => array(
        'field_link_single',
      ),
      'PDF' => array(
        'field_file_single_public',
      ),
    );    
    // Loop through each possible value for the field_book_url_or_pdf field,
    // controlling the visibility of the dependent fields.    
    foreach ($map as $value => $fields) {
      foreach ($fields as $field) {
        $form[$field]['#states'] = array(
          'visible' => array(
            ':input[name="' . 'field_book_url_pdf_unlimited' . '[' . $langcode . '][' . $form['#delta'] . '][field_book_url_or_pdf][' . $langcode . ']"]' => array(
              array('value' => $value),
            ),
          ),
        );
      }
    }
    // remove "n/a" as an option for the field_book_url_or_pdf
    unset($form['field_book_url_or_pdf'][$langcode]['#options']['_none']);
  }

}
